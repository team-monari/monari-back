name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        env:
          SPRING_PROFILES_ACTIVE: prod
          SEOUL_API_KEY: ${{ secrets.SEOUL_API_KEY }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
        run: ./gradlew clean build

      - name: Build Docker image
        run: docker build -t jongminhong844/monari:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: docker push jongminhong844/monari:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 대상 디렉토리 생성 및 이동 (EC2 인스턴스의 배포 디렉토리)
            cd /home/ubuntu/monari || { mkdir -p /home/ubuntu/monari && cd /home/ubuntu/monari; }
            
            # 이미 docker-compose.yml 파일이 있다면 삭제 (최신 파일을 받기 위함)
            [ -f docker-compose.yml ] && rm docker-compose.yml
            
            # sparse-checkout 방식으로 docker-compose.yml 파일만 클론하여 가져오기
            git clone --no-checkout https://github.com/${{ github.repository }}.git temp-repo
            cd temp-repo
            git sparse-checkout init --cone
            git sparse-checkout set docker-compose.yml
            git checkout
            mv docker-compose.yml ../
            cd ..
            rm -rf temp-repo
            
            # .env 파일 생성
            cat <<EOF > .env
            SEOUL_API_KEY=${{ secrets.SEOUL_API_KEY }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_REDIRECT_URI=${{ secrets.KAKAO_REDIRECT_URI }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            DB_URL=${{ secrets.DB_URL }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            S3_REGION=${{ secrets.S3_REGION }}
            S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}
            S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}
            EOF

            docker compose pull
            docker compose up -d --remove-orphans
